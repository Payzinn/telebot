from telebot.types import Message
from config_data.config import DEFAULT_COMMANDS
from loader import bot
from telebot import types
from config_data.config import WEATHER_TOKEN
from config_data.config import EXCHANGE_TOKEN
from config_data.config import IP_TOKEN
import requests
import json
from translate import Translator
import re
from datetime import date
from datetime import timedelta


translator_en_to_ru = Translator(from_lang='en', to_lang='ru')
translator_ru_to_en = Translator(from_lang='ru', to_lang='en')

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
weather_item = types.KeyboardButton('üå§Ô∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')
cost_item = types.KeyboardButton('üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –≤ –≥–æ—Ä–æ–¥–µ')
hotel_item = types.KeyboardButton('üè¨ –û—Ç–µ–ª–∏')
markup.add(weather_item, cost_item, hotel_item)

today = date.today()
two_weeks = today + timedelta(weeks=2)


# from default_handlers.cost import get_city
# from default_handlers.weather import city_input

@bot.message_handler(commands=["start"])
def welcome(message: Message):
    print(f'{message.from_user.full_name} –í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é welcome')
    commands = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ç–µ–±–µ –∏–Ω–æ—Ä—Ñ–º–∞—Ü–∏—é –æ –Ω—É–∂–Ω–æ–º –≥–æ—Ä–æ–¥–µ.', reply_markup=markup)
    bot.register_next_step_handler(commands, get_command)


def get_command(message: Message):
    text = message.text

    if text == 'üå§Ô∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É':
        city_input(message)
    elif text == 'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –≤ –≥–æ—Ä–æ–¥–µ':
        get_city(message)
    elif text == 'üè¨ –û—Ç–µ–ª–∏':
        date_and_city(message)


#WEATHER
def city_input(message: Message):
    print(f'{message.from_user.full_name} –í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é city_input, —É–∑–Ω–∞—ë—Ç –ø–æ–≥–æ–¥—É')

    city = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')
    bot.register_next_step_handler(city, get_weather)

def get_weather(message: Message):
    city = message.text
    if message.text == "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –≤ –≥–æ—Ä–æ–¥–µ":
        get_city(message)
    elif message.text == "üè¨ –û—Ç–µ–ª–∏":
        date_and_city(message)
    elif message.text == "üå§Ô∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É":
        city_input(message)
    else:
        print(f'{message.from_user.full_name} –í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é get_weather')
        print(f"–í–≤–µ–¥—ë–Ω—ã–π –≥–æ—Ä–æ–¥: {city}")
        weather_request = "https://api.openweathermap.org/data/2.5/weather?q={},&appid={}&units=metric".format(city, WEATHER_TOKEN)
        url = requests.get(weather_request)
        data = json.loads(url.text)

        if data['cod'] != '400' and data['cod'] != '404':
            msg = bot.send_message(message.chat.id, f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(data['main']['temp'])}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {int(data['main']['feels_like'])}¬∞C\n–ü–æ–≥–æ–¥–∞: {translator_en_to_ru.translate(data['weather'][0]['description'])}', reply_markup=markup)
            print(f"{message.from_user.full_name} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city}: {int(data['main']['temp'])}¬∞C")
        else:
            bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω')
            city_input(message)
            print(f"{message.from_user.full_name} –ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        bot.register_next_step_handler(msg, get_command)


#COST
def get_city(message: Message):
    print(f'{message.from_user.full_name} –í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é get_city, —É–∑–Ω–∞—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –≤ –≥–æ—Ä–æ–¥–µ')

    city = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–∑–Ω–∏')
    bot.register_next_step_handler(city, get_cost_of_life)

def get_cost_of_life(message: Message):
    city = message.text
    if message.text == "üå§Ô∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É":
        city_input(message)
    elif message.text == "üè¨ –û—Ç–µ–ª–∏":
        date_and_city(message)
    elif message.text == "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –≤ –≥–æ—Ä–æ–¥–µ":
        get_city(message)
    else:
        print(f'{message.from_user.full_name} –ì–æ—Ä–æ–¥: {city}')
        city_url = translator_ru_to_en.translate(city.lower())
        print(city_url.lower())
        cost_of_life = requests.get(f'https://livingcost.org/cost/russia/{city_url.lower()}')
        content = cost_of_life.text
        if "404: page not found. Search for cities and countries below" in content:
            bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω')
            get_city(message)
            print(f"{message.from_user.full_name} –ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        else:
            pattern = r'data-usd="\d{2,4}.\d{1,4}"'
            result = re.findall(pattern, content, re.MULTILINE)
            price_pattern = r'\d{2,4}.\d{1,4}'
            prices = [float(re.findall(price_pattern, i)[0]) for i in re.findall(pattern, content, re.MULTILINE)]
            rounded_prices = [int(price) for price in prices]

            currency_url = f'https://v6.exchangerate-api.com/v6/{EXCHANGE_TOKEN}/latest/USD'
            response_currency = requests.get(currency_url)
            data = json.loads(response_currency.text)
            ruble_to_dollar = int(data['conversion_rates']['RUB'])
            prices_in_rubles = [price * ruble_to_dollar for price in rounded_prices]
            prices_in_city = prices_in_rubles[:11]

            msg = bot.send_message(message.chat.id, f"""
        üí∞ –ò—Ç–æ–≥–æ —Å –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç–æ–π 
        –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫: {prices_in_city[0]}‚ÇΩ 
        –°–µ–º—å—è –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫: {prices_in_city[1]}‚ÇΩ

        üõãÔ∏è –ë–µ–∑ –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã 
        –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫: {prices_in_city[2]}‚ÇΩ 
        –°–µ–º—å—è –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫: {prices_in_city[3]}‚ÇΩ

        üè® –ê—Ä–µ–Ω–¥–∞ –∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ 
        –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫: {prices_in_city[4]}‚ÇΩ 
        –°–µ–º—å—è –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫: {prices_in_city[5]}‚ÇΩ

        üçΩÔ∏è –ï–¥–∞ 
        –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫: {prices_in_city[6]}‚ÇΩ 
        –°–µ–º—å—è –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫: {prices_in_city[7]}‚ÇΩ

        üöê –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç 
        –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫: {prices_in_city[8]}‚ÇΩ 
        –°–µ–º—å—è –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫: {prices_in_city[9]}‚ÇΩ

        üí≥ –ú–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ—Å–ª–µ —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤: {prices_in_city[10]}‚ÇΩ""", reply_markup=markup)

            print(f"""{message.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏ –≤ –≥–æ—Ä–æ–¥–µ {city}""")

        bot.register_next_step_handler(msg, get_command)


#HOTEL
def date_and_city(message: Message):
    print(message.from_user.full_name, "–í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ date_and_city")

    date_city = bot.send_message(message.chat.id, f"""–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –¥–∞—Ç—É –ø—Ä–∏–±—ã—Ç–∏—è, –¥–∞—Ç—É –æ—Ç–±—ã—Ç–∏—è –ø—Ä–∏–º–µ—Ä: `–ú–æ—Å–∫–≤–∞, {today}, {two_weeks}` (–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é)""", parse_mode='markdown')
    bot.register_next_step_handler(date_city, get_hotel)


def get_hotel(message: Message):
    text = message.text

    if message.text == "üå§Ô∏è –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É":
        city_input(message)
    elif message.text == "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –≤ –≥–æ—Ä–æ–¥–µ":
        get_city(message)
    elif message.text == "üè¨ –û—Ç–µ–ª–∏":
        date_and_city(message)
    else:
        city_date = text.split(', ')
        city_url = city_date

        if len(city_url) < 3:
            bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è!')
            date_and_city(message)
        else:
            hotel_url = f'https://engine.hotellook.com/api/v2/cache.json?location={translator_ru_to_en.translate(city_url[0]).lower()}&currency=rub&checkIn={city_url[1]}&checkOut={city_url[2]}&limit=10'

            response = requests.get(hotel_url)
            if str(response) == '<Response [200]>':
                print(message.from_user.full_name, response)
                data = json.loads(response.text)
                content = data
                bot.send_message(message.chat.id,"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
                for hotel in content:
                    current_hotel = translator_en_to_ru.translate(hotel['hotelName'])
                    hotel_without_space = current_hotel.replace(" ", "")
                    link_on_hotel = f"https://yandex.ru/maps/?text={hotel_without_space}"
                    msg = bot.send_message(message.chat.id, f"""

    –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {translator_en_to_ru.translate(hotel['hotelName'])}
    –ó–≤—ë–∑–¥: {hotel['stars']}
    –¶–µ–Ω–∞ –æ—Ç: {int(hotel['priceFrom'])} 
    –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {int(hotel['priceAvg'])} 
    –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É: {link_on_hotel}    
                        """)
                print(message.from_user.full_name, '–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª—è—Ö')
            else:
                bot.send_message(message.chat.id,'–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ò–ª–∏ –≤—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ.')
                date_and_city(message)
                print(message.from_user.full_name, '–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞')
        bot.register_next_step_handler(msg, get_command)
